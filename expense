#! /usr/bin/env ruby

require 'pg'
require 'io/console'
require 'pry'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def setup_schema
    schema = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    if schema.first['count'] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
         id serial PRIMARY KEY,
         amount numeric(13,2) NOT NULL CHECK(amount > 0),
         memo text NOT NULL,
         created_on date NOT NULL
       );
      SQL
    end
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC")
    display_expenses(result)
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expense(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE ($1)"
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_expenses(result)
  end

  def delete_expense(id)
    result = @connection.exec_params("SELECT * FROM expenses WHERE id = $1", [id])
    if result.values.empty?
      puts "Id : '#{id}' is not in the databse"
    else
      @connection.exec_params("DELETE from expenses WHERE id = $1", [id])
      puts "The following has been deleted : "
      display_expenses(result)
    end
  end

  def delete_all_expenses
    puts "WARNING : are you sure you want to clear all expenses? [y/n] "
    response = $stdin.getch
    if response == 'y'
      @connection.exec("DELETE FROM expenses")
      puts "All expenses have been cleared."
    else
      abort
    end
  end

  private

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]

      puts columns.join(" | ")
    end
    display_count(expenses)
    display_amount_total(expenses)
  end

  def display_count(expenses)
    puts "Number of expenses : #{expenses.values.length}"
  end

  def display_amount_total(expenses)
    total_amount = expenses.inject(0) { |sum, line| sum += line['amount'].to_f }
    puts '-'*70
    puts 'Total' + "#{total_amount}".rjust(26)
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift
    case command
    when "add"
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "list"
      @application.list_expenses
    when "search"
      @application.search_expense(arguments[0])
    when "delete"
      @application.delete_expense(arguments[0])
    when "clear"
      @application.delete_all_expenses
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
